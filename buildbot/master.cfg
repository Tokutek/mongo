# -*- python -*-
# ex: set syntax=python:

import os
import os.path
import re
import stat

import secrets

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot import buildslave

c['slaves'] = [buildslave.BuildSlave('lex1', secrets.passwds['lex1'],
                                     properties={'ncpus': 4,
                                                 'system': 'linux',
                                                 'machine': 'x86_64',
                                                 'env': {
                                                     'CC': 'gcc47',
                                                     'CXX': 'g++47',
                                                     'CPATH': '/usr/local/valgrind-3.8.1/include:${CPATH}'
                                                 }}),
               buildslave.BuildSlave('lex3', secrets.passwds['lex3'],
                                     properties={'ncpus': 16,
                                                 'system': 'linux',
                                                 'machine': 'x86_64',
                                                 'env': {
                                                     'CC': 'gcc47',
                                                     'CXX': 'g++47',
                                                     'CPATH': '/usr/local/valgrind-3.8.1/include:${CPATH}'
                                                 }}),
               buildslave.BuildSlave('cavil', secrets.passwds['cavil'],
                                     properties={'ncpus': 4,
                                                 'system': 'linux',
                                                 'machine': 'x86_64',
                                                 'env': {}}),
               buildslave.BuildSlave('justice', secrets.passwds['justice'],
                                     properties={'ncpus': 2,
                                                 'system': 'linux',
                                                 'machine': 'x86_64',
                                                 'env': {}})]

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

all_repositories = {
    r'git://github.com/Tokutek/mongo.git': 'mongo',
    r'git://github.com/Tokutek/ft-index.git': 'ft-index',
    r'git://github.com/Tokutek/jemalloc.git': 'jemalloc',
    r'git://github.com/Tokutek/backup-community.git': 'backup-community',
    r'git://github.com/Tokutek/mongo-python-driver.git': 'mongo-python-driver',
    r'git://github.com/Tokutek/mongo-ruby-driver.git': 'mongo-ruby-driver',
    r'git://github.com/Tokutek/mongo-java-driver.git': 'mongo-java-driver',
    r'git://github.com/Tokutek/mongo-perl-driver.git': 'mongo-perl-driver',
}

def codebaseGenerator(chdict):
    return all_repositories[chdict['repository']]

c['codebaseGenerator'] = codebaseGenerator

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes import gitpoller
c['change_source'] = []
c['change_source'].append(gitpoller.GitPoller('git://github.com/Tokutek/mongo.git', workdir='gitpoller-mongo', branches=['master', 'releases/1.0'], pollinterval=300))
c['change_source'].append(gitpoller.GitPoller('git://github.com/Tokutek/ft-index.git', workdir='gitpoller-ft-index', branches=['master', 'releases/tokumx-1.0'], pollinterval=300))
c['change_source'].append(gitpoller.GitPoller('git://github.com/Tokutek/jemalloc.git', workdir='gitpoller-jemalloc', branches=['3.3.1'], pollinterval=300))
c['change_source'].append(gitpoller.GitPoller('git://github.com/Tokutek/backup-community.git', workdir='gitpoller-mongo', branches=['master'], pollinterval=300))
c['change_source'].append(gitpoller.GitPoller('git://github.com/Tokutek/mongo-python-driver.git', workdir='gitpoller-mongo-python-driver', branches=['master'], pollinterval=300))
c['change_source'].append(gitpoller.GitPoller('git://github.com/Tokutek/mongo-ruby-driver.git', workdir='gitpoller-mongo-ruby-driver', branches=['master'], pollinterval=300))
c['change_source'].append(gitpoller.GitPoller('git://github.com/Tokutek/mongo-java-driver.git', workdir='gitpoller-mongo-java-driver', branches=['master'], pollinterval=300))
c['change_source'].append(gitpoller.GitPoller('git://github.com/Tokutek/mongo-perl-driver.git', workdir='gitpoller-mongo-perl-driver', branches=['master'], pollinterval=300))

all_master_codebases = {'mongo': {'repository': 'git://github.com/Tokutek/mongo.git',
                                  'branch': 'master'},
                        'ft-index': {'repository': 'git://github.com/Tokutek/ft-index.git',
                                     'branch': 'master'},
                        'jemalloc': {'repository': 'git://github.com/Tokutek/jemalloc.git',
                                     'branch': '3.3.1'},
                        'backup-community': {'repository': 'git://github.com/Tokutek/backup-community.git', 'branch': 'master'},
                        'mongo-python-driver': {'repository': 'git://github.com/Tokutek/mongo-python-driver.git', 'branch': 'master'},
                        'mongo-ruby-driver': {'repository': 'git://github.com/Tokutek/mongo-ruby-driver.git', 'branch': 'master'},
                        'mongo-java-driver': {'repository': 'git://github.com/Tokutek/mongo-java-driver.git', 'branch': 'master'},
                        'mongo-perl-driver': {'repository': 'git://github.com/Tokutek/mongo-perl-driver.git', 'branch': 'master'}}

all_codebases = {'mongo': {'repository': 'git://github.com/Tokutek/mongo.git'},
                 'ft-index': {'repository': 'git://github.com/Tokutek/ft-index.git'},
                 'jemalloc': {'repository': 'git://github.com/Tokutek/jemalloc.git'},
                 'backup-community': {'repository': 'git://github.com/Tokutek/backup-community.git', 'branch': 'master'},
                 'mongo-python-driver': {'repository': 'git://github.com/Tokutek/mongo-python-driver.git', 'branch': 'master'},
                 'mongo-ruby-driver': {'repository': 'git://github.com/Tokutek/mongo-ruby-driver.git', 'branch': 'master'},
                 'mongo-java-driver': {'repository': 'git://github.com/Tokutek/mongo-java-driver.git', 'branch': 'master'},
                 'mongo-perl-driver': {'repository': 'git://github.com/Tokutek/mongo-perl-driver.git', 'branch': 'master'}}

all_onepointoh_codebases = {'mongo': {'repository': 'git://github.com/Tokutek/mongo.git',
                                      'branch': 'releases/1.0'},
                            'ft-index': {'repository': 'git://github.com/Tokutek/ft-index.git',
                                         'branch': 'releases/tokumx-1.0'},
                            'jemalloc': {'repository': 'git://github.com/Tokutek/jemalloc.git',
                                         'branch': '3.3.1'},
                            'mongo-python-driver': {'repository': 'git://github.com/Tokutek/mongo-python-driver.git', 'branch': 'master'},
                            'mongo-ruby-driver': {'repository': 'git://github.com/Tokutek/mongo-ruby-driver.git', 'branch': 'master'},
                            'mongo-java-driver': {'repository': 'git://github.com/Tokutek/mongo-java-driver.git', 'branch': 'master'},
                            'mongo-perl-driver': {'repository': 'git://github.com/Tokutek/mongo-perl-driver.git', 'branch': 'master'}}

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot import locks
from buildbot.process import buildstep, factory, properties
from buildbot.steps import shell, slave, transfer, trigger
from buildbot.steps.source import git

jN = properties.Interpolate('-j%(prop:ncpus:-1)s')
scons_build_type = properties.Interpolate('%(prop:debugbuild:#?|--dd|--release)s')

@properties.renderer
def scons_tokukv_version(props):
    s = '--force-toku-version='
    if not props.hasProperty('got_revision'):
        s += 'notokukvversion'
    rev = props.getProperty('got_revision')
    if 'ft-index' not in rev:
        s += 'notokukvversion'
    else:
        s += rev['ft-index']
    return s

checkout_steps = [git.Git(name='update mongo', codebase='mongo', repourl='git://github.com/Tokutek/mongo.git', mode='incremental'),
                  git.Git(name='update ft-index', codebase='ft-index', repourl='git://github.com/Tokutek/ft-index.git', mode='incremental', workdir='build/src/third_party/ft-index'),
                  git.Git(name='update jemalloc', codebase='jemalloc', repourl='git://github.com/Tokutek/jemalloc.git', mode='incremental', workdir='build/src/third_party/ft-index/third_party/jemalloc'),
                  git.Git(name='update backup', codebase='backup-community', repourl='git://github.com/Tokutek/backup-community.git', mode='incremental', workdir='build/src/third_party/backup-community')]

build_ft_index = [shell.Configure(name='configure ft-index',
                                  descriptionSuffix=['ft-index'],
                                  command=['cmake',
                                           '-DUSE_BDB=OFF',
                                           '-DBUILD_TESTING=OFF',
                                           '-DUSE_CTAGS=OFF',
                                           '-DUSE_CSCOPE=OFF',
                                           '-DUSE_GTAGS=OFF',
                                           '-DUSE_ETAGS=OFF',
                                           '-DCMAKE_LINK_DEPENDS_NO_SHARED=ON',
                                           properties.Interpolate('-DCMAKE_INSTALL_PREFIX=%(prop:workdir)s/build/src/third_party/tokukv'),
                                           properties.Interpolate('-DTOKU_DEBUG_PARANOID=%(prop:debugbuild:#?|ON|OFF)s'),
                                           properties.Interpolate('-DUSE_VALGRIND=%(prop:debugbuild:#?|ON|OFF)s'),
                                           properties.Interpolate('-DCMAKE_BUILD_TYPE=%(prop:debugbuild:#?|Debug|Release)s'),
                                           '..'],
                                  env=properties.Property('env'),
                                  workdir=properties.Interpolate('build/src/third_party/ft-index/%(prop:debugbuild:#?|dbg|opt)s')),
                  shell.Compile(name='compile ft-index',
                                descriptionSuffix=['ft-index'],
                                command=['cmake',
                                         '--build',
                                         properties.Interpolate('src/third_party/ft-index/%(prop:debugbuild:#?|dbg|opt)s'),
                                         '--target',
                                         'install',
                                         '--',
                                         jN],
                                warningPattern="^(.\*?):([0-9]+): [Ww]arning: (.\*)$",
                                warningExtractor=shell.Compile.warnExtractFromRegexpGroups,
                                suppressionFile='buildbot/compile.suppressions',
                                env=properties.Property('env'))]

build_backup = [shell.Configure(name='configure backup-community',
                                descriptionSuffix=['backup-community'],
                                command=['cmake',
                                         '-DBUILD_TESTING=OFF',
                                         '-DCMAKE_LINK_DEPENDS_NO_SHARED=ON',
                                         '-DHOT_BACKUP_LIBNAME=HotBackup',
                                         properties.Interpolate('-DCMAKE_BUILD_TYPE=%(prop:debugbuild:#?|ON|OFF)s'),
                                         properties.Interpolate('-DCMAKE_INSTALL_PREFIX=%(prop:workdir)s/build/src/third_party/tokubackup'),
                                         '-Wno-dev',
                                         '..'],
                                env=properties.Property('env'),
                                workdir=properties.Interpolate('build/src/third_party/backup-community/backup/%(prop:debugbuild:#?|dbg|opt)s')),
                shell.Compile(name='compile backup-community',
                              descriptionSuffix=['backup-community'],
                              command=['cmake',
                                       '--build',
                                       properties.Interpolate('src/third_party/backup-community/backup/%(prop:debugbuild:#?|dbg|opt)s'),
                                       '--target',
                                       'install',
                                       '--',
                                       jN],
                              warningPattern="^(.\*?):([0-9]+): [Ww]arning: (.\*)$",
                              warningExtractor=shell.Compile.warnExtractFromRegexpGroups,
                              suppressionFile='buildbot/compile.suppressions',
                              env=properties.Property('env'))]

def dn(props):
    if props.hasProperty('distname') and props.getProperty('distname') and len(props.getProperty('distname')):
        return props.getProperty('distname')
    else:
        rev = props.getProperty('got_revision')
        return rev['mongo'][:7] + '-ft-' + rev['ft-index'][:7]

@properties.renderer
def distname(props):
    return '--distname=' + dn(props)

def _installdir(props):
    s = ('tokumx-' + dn(props) +
         '-' + props.getProperty('system') +
         '-' + props.getProperty('machine'))
    if props.getProperty('debugbuild'):
        s += '-debug'
    return s

@properties.renderer
def installdir(props):
    return _installdir(props)

def _tarball(props):
    return _installdir(props) + '.tgz'

@properties.renderer
def tarball(props):
    return _tarball(props)

def _md5(props):
    return _tarball(props) + '.md5'

@properties.renderer
def md5(props):
    return _md5(props)

def _cksum_tarball_command(props):
    return 'md5sum %s > %s' % (_tarball(props), _md5(props))

@properties.renderer
def cksum_tarball_command(props):
    return _cksum_tarball_command(props)

def _verify_md5_command(props):
    return 'md5sum --check ' + _md5(props)

@properties.renderer
def verify_md5_command(props):
    return _verify_md5_command(props)

def _dest_tarball(props):
    return os.path.join('builds', _tarball(props))

@properties.renderer
def dest_tarball(props):
    return _dest_tarball(props)

def _dest_md5(props):
    return _dest_tarball(props) + '.md5'

@properties.renderer
def dest_md5(props):
    return _dest_md5(props)

def _debuginfo_tarball(props):
    return _installdir(props) + '-debuginfo.tgz'

@properties.renderer
def debuginfo_tarball(props):
    return _debuginfo_tarball(props)

def _debuginfo_md5(props):
    return _debuginfo_tarball(props) + '.md5'

@properties.renderer
def debuginfo_md5(props):
    return _debuginfo_md5(props)

def _cksum_debuginfo_tarball_command(props):
    return 'md5sum %s > %s' % (_debuginfo_tarball(props), _debuginfo_md5(props))

@properties.renderer
def cksum_debuginfo_tarball_command(props):
    return _cksum_debuginfo_tarball_command(props)

def _dest_debuginfo_tarball(props):
    return os.path.join('builds', _debuginfo_tarball(props))

@properties.renderer
def dest_debuginfo_tarball(props):
    return _dest_debuginfo_tarball(props)

def _dest_debuginfo_md5(props):
    return _dest_debuginfo_tarball(props) + '.md5'

@properties.renderer
def dest_debuginfo_md5(props):
    return _dest_debuginfo_md5(props)

build_mongo = shell.Compile(name='compile mongo',
                            descriptionSuffix=['mongo'],
                            warningPattern="^(.\*?):([0-9]+): [Ww]arning: (.\*)$",
                            warningExtractor=shell.Compile.warnExtractFromRegexpGroups,
                            suppressionFile='buildbot/compile.suppressions',
                            command=['scons',
                                     scons_build_type,
                                     scons_tokukv_version,
                                     jN,
                                     '--skip-tarballs',
                                     '.'])

quick_compile_factory = factory.BuildFactory()
quick_compile_factory.addSteps(checkout_steps)
quick_compile_factory.addSteps(build_ft_index)
quick_compile_factory.addSteps(build_backup)
quick_compile_factory.addStep(build_mongo)

build_mongo_tarballs = [shell.Compile(name='compile mongo',
                                      descriptionSuffix=['mongo'],
                                      warningPattern="^(.\*?):([0-9]+): [Ww]arning: (.\*)$",
                                      warningExtractor=shell.Compile.warnExtractFromRegexpGroups,
                                      suppressionFile='buildbot/compile.suppressions',
                                      command=['scons',
                                               scons_build_type,
                                               scons_tokukv_version,
                                               jN,
                                               distname,
                                               '.']),
                        shell.ShellCommand(command=['bash', '-c', cksum_tarball_command], hideStepIf=True),
                        shell.ShellCommand(command=['bash', '-c', cksum_debuginfo_tarball_command], hideStepIf=True)]

build_tarball_factory = factory.BuildFactory()
build_tarball_and_trigger_test_factory = factory.BuildFactory()
for f in [build_tarball_factory, build_tarball_and_trigger_test_factory]:
    f.addSteps(checkout_steps)
    f.addSteps(build_ft_index)
    f.addSteps(build_backup)
    f.addSteps(build_mongo_tarballs)
    for src, dest in [(tarball, dest_tarball),
                      (debuginfo_tarball, dest_debuginfo_tarball),
                      (md5, dest_md5),
                      (debuginfo_md5, dest_debuginfo_md5)]:
        f.addStep(transfer.FileUpload(slavesrc=src, masterdest=dest, mode=(stat.S_IRUSR|stat.S_IWUSR|stat.S_IRGRP|stat.S_IROTH)))
        f.addStep(shell.ShellCommand(command=['rm', src], hideStepIf=True))

build_tarball_and_trigger_test_factory.addStep(trigger.Trigger(schedulerNames=['release_test'],
                                                               waitForFinish=False,
                                                               updateSourceStamp=True,
                                                               set_properties={'debugbuild': properties.Property('debugbuild'),
                                                                               'distname': properties.Property('distname')}))

# protects /tmp/unittest which is hard-coded into dbtests.cpp
unittest_lock = locks.SlaveLock("unittest_lock", maxCount=1)

class TAPLogObserver(buildstep.LogLineObserver):
    _tap_re = re.compile(r'(ok|not ok)(?: ([0-9]*)(?: ([^#]*)(?:#(.*))?)?)? ')
    tests = 0

    def outLineReceived(self, line):
        m = self._tap_re.match(line.strip())
        if m:
            gs = m.groups()
            self.tests += 1
            self.step.setProgress('tests', self.tests)

@properties.renderer
def smoke_port(props):
    return '--smoke-port=%d' % (17800 + props.getProperty('port_inc'))
smokeprefix = properties.Interpolate('--smokedbprefix=smoke-%(prop:buildername)s-smoke')
cppunitprefix = properties.Interpolate('--smokedbprefix=smoke-%(prop:buildername)s-cppunit')
smoke_step = shell.Test(name='smoke',
                        descriptionSuffix=['smoke'],
                        command=['scons',
                                 scons_build_type,
                                 scons_tokukv_version,
                                 smokeprefix,
                                 smoke_port,
                                 '--skip-tarballs',
                                 'smoke'],
                        locks=[unittest_lock.access('exclusive')],
                        warningPattern=re.compile(r'(?!)'),  # matches no string, we don't want to see warnings from the mongod error log
                        env=properties.Property('env'))
smoke_step.addLogObserver('stdio', TAPLogObserver())
cppunit_step = shell.Test(name='c++unit',
                          descriptionSuffix=['c++'],
                          command=['scons',
                                   scons_build_type,
                                   scons_tokukv_version,
                                   cppunitprefix,
                                   smoke_port,
                                   '--smoke-quiet',
                                   '--skip-tarballs',
                                   'smokeCppUnittests'],
                          warningPattern=re.compile(r'(?!)'),  # matches no string, we don't want to see warnings from the mongod error log
                          env=properties.Property('env'))
cppunit_step.addLogObserver('stdio', TAPLogObserver())
cpp_tests = [smoke_step, slave.MakeDirectory(dir=properties.Interpolate('build/smoke-%(prop:buildername)s-cppunit'), hideStepIf=True), cppunit_step]

# protects js tests that spawn mongods with hard-coded port numbers
sets_lock = locks.SlaveLock("sets_lock", maxCount=1)
def locks_for_suite(suite):
    if suite in ['sharding', 'replSets', 'jsSlowNightly', 'tool']:
        return [sets_lock.access('exclusive')]
    else:
        return []

@properties.renderer
def port(props):
    return '--port=%d' % (17800 + props.getProperty('port_inc'))
def smoke_suite(suite):
    prefix = properties.Interpolate('--smoke-db-prefix=smoke-%(prop:buildername)s-' + suite)
    step = shell.Test(name=suite,
                      descriptionSuffix=[suite],
                      command=['python2',
                               'buildscripts/smoke.py',
                               prefix,
                               port,
                               '--continue-on-failure',
                               '--quiet',
                               suite],
                      locks=locks_for_suite(suite),
                      timeout=7200,
                      warningPattern=re.compile(r'(?!)'),  # matches no string, we don't want to see warnings from the mongod error log
                      logfiles={'tests': properties.Interpolate('smoke-%(prop:buildername)s-' + suite + '/tests.log'),
                                'server': properties.Interpolate('smoke-%(prop:buildername)s-' + suite + '/server.log')},
                      env=properties.Property('env'))
    step.addLogObserver('stdio', TAPLogObserver())
    step.progressMetrics += ('tests',)
    return [slave.RemoveDirectory(dir=properties.Interpolate('build/smoke-%(prop:buildername)s-' + suite), hideStepIf=True, haltOnFailure=False, flunkOnFailure=False),
            slave.MakeDirectory(dir=properties.Interpolate('build/smoke-%(prop:buildername)s-' + suite), hideStepIf=True),
            step]

class TriggerIfTarballMissing(trigger.Trigger):
    def doStepIf(self, step):
        props = self.build.getProperties()
        if props.hasProperty('got_revision'):
            return not os.path.exists(_dest_tarball(props))
        else:
            return False

get_tarball = [TriggerIfTarballMissing(schedulerNames=['tarball'],
                                       waitForFinish=True,
                                       haltOnFailure=True,
                                       updateSourceStamp=True,
                                       set_properties={'debugbuild': properties.Property('debugbuild'),
                                                       'distname': properties.Property('distname')}),
               transfer.FileDownload(mastersrc=dest_tarball, slavedest=tarball),
               transfer.FileDownload(mastersrc=dest_md5, slavedest=md5),
               shell.ShellCommand(name='verify checksum', description=['verifying', 'checksum'], descriptionDone=['verify', 'checksum'],
                                  command=['bash', '-c', verify_md5_command], flunkOnFailure=True, haltOnFailure=True)]

unpack_tarball = [slave.MakeDirectory(dir='build/mongo-tarball', hideStepIf=True),
                  shell.ShellCommand(name='unpack tarball',
                                     description=['unpacking', 'tarball'],
                                     descriptionDone=['unpack', 'tarball'],
                                     command=['tar', 'xzf', tarball,
                                              '-C', 'mongo-tarball',
                                              '--strip-components', '1'],
                                     haltOnFailure=True),
                  shell.ShellCommand(command=['rm', tarball, md5], hideStepIf=True),
                  shell.ShellCommand(name='link binaries',
                                     command=['bash', '-c',
                                              'for bin in $(ls mongo-tarball/bin); do ln -snf mongo-tarball/bin/$bin .; done'],
                                     hideStepIf=True)]

build_test_extras = shell.Compile(name='compile mongobridge',
                                  descriptionSuffix=['mongobridge'],
                                  warningPattern="^(.\*?):([0-9]+): [Ww]arning: (.\*)$",
                                  warningExtractor=shell.Compile.warnExtractFromRegexpGroups,
                                  suppressionFile='buildbot/compile.suppressions',
                                  command=['scons',
                                           scons_build_type,
                                           scons_tokukv_version,
                                           jN,
                                           '--skip-tarballs',
                                           'mongobridge'])

just_driver_repos = [git.Git(name='update mongo-python-driver', codebase='mongo-python-driver', repourl='git://github.com/Tokutek/mongo-python-driver.git', mode='incremental', workdir='mongo-python-driver'),
                     git.Git(name='update mongo-ruby-driver', codebase='mongo-ruby-driver', repourl='git://github.com/Tokutek/mongo-ruby-driver.git', mode='incremental', workdir='mongo-ruby-driver'),
                     git.Git(name='update mongo-java-driver', codebase='mongo-java-driver', repourl='git://github.com/Tokutek/mongo-java-driver.git', mode='incremental', workdir='mongo-java-driver'),
                     git.Git(name='update mongo-perl-driver', codebase='mongo-perl-driver', repourl='git://github.com/Tokutek/mongo-perl-driver.git', mode='incremental', workdir='mongo-perl-driver')]


class PymongoLogObserver(buildstep.LogLineObserver):
    _line_re = re.compile(r'(\w+)  \(([.\w]+)\) \.\.\. (ok|SKIP|ERROR|FAIL)')
    tests = 0

    def errLineReceived(self, line):
        m = self._line_re.search(line.strip())
        if m:
            name, suite, result = m.groups()
            self.tests += 1
            self.step.setProgress('tests', self.tests)

class RubyLogObserver(buildstep.LogLineObserver):
    _func_line_re = re.compile(r'  (\w+):\s*(\.|F): \(([0-9]+\.[0-9]+)\)')
    _name_line_re = re.compile(r'  test: (.*) :\s*(\.|F): \(([0-9]+\.[0-9]+)\)')
    tests = 0
    time = 0.0

    def outLineReceived(self, line):
        m = self._func_line_re.search(line.strip())
        if m:
            name, result, time = m.groups()
            self.tests += 1
            self.time += float(time)
            self.step.setProgress('tests', self.tests)
            self.step.setProgress('time', self.time)
        else:
            m = self._name_line_re.search(line.strip())
            if m:
                name, result, time = m.groups()
                self.tests += 1
                self.time += float(time)
                self.step.setProgress('tests', self.tests)
                self.step.setProgress('time', self.time)

def all_driver_tests(**kwargs):
    python_step = shell.Test(name='python',
                             descriptionSuffix=['python'],
                             command=['nosetests', '-v'],
                             workdir='mongo-python-driver',
                             **kwargs)
    python_step.addLogObserver('stdio', PymongoLogObserver())
    python_step.progressMetrics += ('tests',)

    ruby_step = shell.Test(name='ruby',
                           descriptionSuffix=['ruby'],
                           command=['bash', '-c', 'source ~/.rvm/scripts/rvm ; rake test TESTOPTS="-v"'],
                           workdir='mongo-ruby-driver',
                           **kwargs)
    ruby_step.addLogObserver('stdio', RubyLogObserver())
    ruby_step.progressMetrics += ('tests', 'time')
    return [python_step,
            ruby_step,
            shell.Test(name='java',
                       descriptionSuffix=['java'],
                       command=['mvn', 'test'],
                       workdir='mongo-java-driver',
                       **kwargs),
            shell.Test(name='perl',
                       descriptionSuffix=['perl'],
                       command=['bash', '-c', 'source ~/perl5/perlbrew/etc/bashrc ; dzil test'],
                       workdir='mongo-perl-driver',
                       warningPattern="^(.\*?):([0-9]+): [Ww]arning: (.\*)$",
                       warningExtractor=shell.Compile.warnExtractFromRegexpGroups,
                       suppressionFile='buildbot/compile.suppressions',
                       **kwargs)]

single_server_logs = {'server': '/tmp/mongo-test-server.log'}

start_single_server = [slave.RemoveDirectory(dir='/data/db', hideStepIf=True, haltOnFailure=False, flunkOnFailure=False),
                       slave.MakeDirectory(dir='/data/db', hideStepIf=True),
                       shell.ShellCommand(name='start single server',
                                          description=['starting', 'single', 'server'],
                                          descriptionDone=['start', 'single', 'server'],
                                          command=['mongo-tarball/bin/mongod', '--fork', '--logpath', '/tmp/mongo-test-server.log'],
                                          logfiles=single_server_logs,
                                          haltOnFailure=True)]
stop_single_server = shell.ShellCommand(name='stop single server',
                                        description=['stopping', 'single', 'server'],
                                        descriptionDone=['stop', 'single', 'server'],
                                        command=['mongo-tarball/bin/mongod', '--shutdown'],
                                        logfiles=single_server_logs,
                                        alwaysRun=True)

rs_logs = {'db0': '/tmp/mongo-test-server-db0.log',
           'db1': '/tmp/mongo-test-server-db1.log',
           'db2': '/tmp/mongo-test-server-db2.log'}

start_replica_set = [slave.RemoveDirectory(dir='/data/db/rs0-db0', hideStepIf=True, haltOnFailure=False, flunkOnFailure=False),
                     slave.RemoveDirectory(dir='/data/db/rs0-db1', hideStepIf=True, haltOnFailure=False, flunkOnFailure=False),
                     slave.RemoveDirectory(dir='/data/db/rs0-db2', hideStepIf=True, haltOnFailure=False, flunkOnFailure=False),
                     slave.MakeDirectory(dir='/data/db/rs0-db0', hideStepIf=True),
                     slave.MakeDirectory(dir='/data/db/rs0-db1', hideStepIf=True),
                     slave.MakeDirectory(dir='/data/db/rs0-db2', hideStepIf=True),
                     shell.ShellCommand(
                         name='start replica set',
                         description=['starting', 'replica', 'set'],
                         descriptionDone=['start', 'replica', 'set'],
                         command=['bash', '-c',
                                  ' && '.join(['./mongod --replSet rs0 --dbpath /data/db/rs0-db0 --fork --logpath /tmp/mongo-test-server-db0.log',
                                               './mongod --replSet rs0 --dbpath /data/db/rs0-db1 --port 27018 --fork --logpath /tmp/mongo-test-server-db1.log',
                                               './mongod --replSet rs0 --dbpath /data/db/rs0-db2 --port 27019 --fork --logpath /tmp/mongo-test-server-db2.log',
                                               './mongo --eval "rs.initiate({_id: \'rs0\', version: 1, protocolVersion: 65, members: [{_id: 0, host: \'localhost:27017\'}, {_id: 1, host: \'localhost:27018\'}, {_id: 2, host: \'localhost:27019\'}]}); while (!db.adminCommand(\'ismaster\').ismaster) { sleep (1000); }"',
                                               './mongo --port 27018 --eval "while (!db.adminCommand(\'ismaster\').secondary) { sleep (1000); }"',
                                               './mongo --port 27019 --eval "while (!db.adminCommand(\'ismaster\').secondary) { sleep (1000); }"'])],
                         logfiles=rs_logs,
                         haltOnFailure=True)]
stop_replica_set = shell.ShellCommand(
    name='stop replica set',
    description=['stopping', 'replica', 'set'],
    descriptionDone=['stop', 'replica', 'set'],
    command=['bash', '-c',
             ' ; '.join(['./mongo --port 27018 --eval "db.adminCommand({shutdown: 1, force: true})"',
                         './mongo --port 27019 --eval "db.adminCommand({shutdown: 1, force: true})"',
                         './mongo --eval "db.adminCommand({shutdown: 1, force: true})"',
                         'true'])],
    alwaysRun=True,
    logfiles=rs_logs)

driver_test_lock = locks.SlaveLock('driver_test_lock', maxCount=1)

driver_test_factory = factory.BuildFactory()
driver_test_factory.addSteps(checkout_steps)
driver_test_factory.addSteps(just_driver_repos)
driver_test_factory.addSteps(get_tarball)
driver_test_factory.addSteps(unpack_tarball)
driver_test_factory.addSteps(start_single_server)
driver_test_factory.addSteps(all_driver_tests(logfiles=single_server_logs))
driver_test_factory.addStep(stop_single_server)
driver_test_factory.addSteps(start_replica_set)
driver_test_factory.addSteps(all_driver_tests(logfiles=rs_logs))
driver_test_factory.addStep(stop_replica_set)

quick_test_factory = factory.BuildFactory()
quick_test_factory.addSteps(checkout_steps)
quick_test_factory.addSteps(just_driver_repos)
quick_test_factory.addSteps(build_ft_index)
quick_test_factory.addSteps(build_backup)
quick_test_factory.addSteps(get_tarball)
quick_test_factory.addStep(trigger.Trigger(schedulerNames=['driver_test'],
                                           waitForFinish=False,
                                           updateSourceStamp=True,
                                           set_properties={'debugbuild': properties.Property('debugbuild'),
                                                           'distname': properties.Property('distname')}))
quick_test_factory.addSteps(cpp_tests)
quick_test_factory.addStep(build_test_extras)
quick_test_factory.addSteps(unpack_tarball)
quick_test_factory.addSteps(smoke_suite('js'))

release_test_factory = factory.BuildFactory()
release_test_factory.addSteps(checkout_steps)
release_test_factory.addSteps(just_driver_repos)
release_test_factory.addSteps(build_ft_index)
release_test_factory.addSteps(build_backup)
release_test_factory.addSteps(get_tarball)
release_test_factory.addStep(trigger.Trigger(schedulerNames=['driver_test'],
                                             waitForFinish=False,
                                             updateSourceStamp=True,
                                             set_properties={'debugbuild': properties.Property('debugbuild'),
                                                             'distname': properties.Property('distname')}))
release_test_factory.addSteps(cpp_tests)
release_test_factory.addStep(build_test_extras)
release_test_factory.addSteps(unpack_tarball)
for suite in ['js', 'tool', 'sharding', 'replSets', 'jsSlowNightly']:
    release_test_factory.addSteps(smoke_suite(suite))

from buildbot import config

c['builders'] = []
for type in ['dbg', 'opt']:
    is_debug = type == 'dbg'
    c['builders'].append(
        config.BuilderConfig(name='compile-linux-%s' % type,
                             slavenames=['lex3'],
                             properties={'debugbuild': is_debug},
                             factory=quick_compile_factory))

    extra_port_inc = 0 if is_debug else 100
    c['builders'].append(
        config.BuilderConfig(name='quick_test-linux-%s' % type,
                             slavenames=['lex3'],
                             properties={'debugbuild': is_debug,
                                         'port_inc': 0 + extra_port_inc},
                             factory=quick_test_factory))

    c['builders'].append(
        config.BuilderConfig(name='nightly_test-linux-%s' % type,
                             slavenames=['lex3'],
                             properties={'debugbuild': is_debug,
                                         'port_inc': 200 + extra_port_inc},
                             factory=release_test_factory))

c['builders'].append(
    config.BuilderConfig(name='tarball',
                         slavenames=['lex1'],
                         factory=build_tarball_factory))

c['builders'].append(
    config.BuilderConfig(name='release_build',
                         slavenames=['lex1'],
                         factory=build_tarball_and_trigger_test_factory))

c['builders'].append(
    config.BuilderConfig(name='release_test-linux',
                         slavenames=['lex3'],
                         properties={'port_inc': 400},
                         factory=release_test_factory,
                         locks=[driver_test_lock.access('exclusive')]))

c['builders'].append(
    config.BuilderConfig(name='driver_test-linux',
                         slavenames=['justice', 'lex3'],
                         factory=driver_test_factory,
                         locks=[driver_test_lock.access('exclusive')]))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.schedulers import basic, forcesched, timed, triggerable

c['schedulers'] = []
c['schedulers'].append(forcesched.ForceScheduler(
    name='force-release',
    codebases=all_codebases,
    builderNames=['release_build'],
    properties=[forcesched.BooleanParameter('debugbuild', 'debugbuild', required=True),
                forcesched.StringParameter('distname', 'distname', required=True)]
    ))
c['schedulers'].append(triggerable.Triggerable(
    name='release_test',
    codebases=all_codebases,
    builderNames=['release_test-linux']))
c['schedulers'].append(triggerable.Triggerable(
    name='driver_test',
    codebases=all_codebases,
    builderNames=['driver_test-linux']))

c['schedulers'].append(basic.SingleBranchScheduler(
    name='compile',
    codebases=all_master_codebases,
    branch='master',
    treeStableTimer=5*60,
    builderNames=['compile-linux-dbg', 'compile-linux-opt']))
c['schedulers'].append(basic.SingleBranchScheduler(
    name='compile-1.0',
    codebases=all_onepointoh_codebases,
    branch='releases/1.0',
    treeStableTimer=5*60,
    builderNames=['compile-linux-dbg', 'compile-linux-opt']))
c['schedulers'].append(basic.SingleBranchScheduler(
    name='quick_test',
    codebases=all_master_codebases,
    branch='master',
    treeStableTimer=60*60,
    builderNames=['quick_test-linux-dbg', 'quick_test-linux-opt']))
c['schedulers'].append(basic.SingleBranchScheduler(
    name='quick_test-1.0',
    codebases=all_onepointoh_codebases,
    branch='releases/1.0',
    treeStableTimer=60*60,
    builderNames=['quick_test-linux-dbg', 'quick_test-linux-opt']))
c['schedulers'].append(forcesched.ForceScheduler(
    name='force',
    codebases=all_codebases,
    builderNames=['compile-linux-dbg', 'compile-linux-opt',
                  'quick_test-linux-dbg', 'quick_test-linux-opt',
                  'nightly_test-linux-dbg', 'nightly_test-linux-opt',
                  'tarball']))
c['schedulers'].append(timed.Nightly(
    name='nightly_test',
    codebases=all_master_codebases,
    branch='master',
    hour=0, minute=0,
    builderNames=['nightly_test-linux-dbg', 'nightly_test-linux-opt']))
c['schedulers'].append(triggerable.Triggerable(
    name='tarball',
    codebases=all_master_codebases,
    builderNames=['tarball']))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth(secrets.webusers.items()),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = 'auth',
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = 'auth',
    cancelPendingBuild = 'auth',
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "TokuMX"
c['titleURL'] = "http://github.com/Tokutek/mongo"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
