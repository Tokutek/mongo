tokumx news
===========

tokumx 1.0.4
------------
Release date: TBD

General
~~~~~~~


Bug fixes
~~~~~~~~~

    - Backported https://jira.mongodb.org/browse/SERVER-7951[SERVER-7951]
      from mongodb 2.4 to allow replace-style updates when using hashed
      shard keys. (#347)


tokumx 1.0.3
------------
Release date: 2013-07-23

General
~~~~~~~

    - This release adds a tool for performing online data migration from
      vanilla MongoDB.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Added the `mongo2toku` tool that reads and replays the vanilla
      MongoDB replication format, which allows TokuMX to sync from vanilla
      MongoDB. (#320)

    - Added a storage layer optimization that improves the processor
      caching behavior and performance of point queries and especially
      non-covering secondary range queries. (#312)

    - Improved the concurrency behavior of the storage layer when, for a
      large transaction, the commit or abort itself is expensive. (#334)


Bug fixes
~~~~~~~~~

    - Fixed a few race conditions and strange behaviors related to
      replication. (#322, #325, #328, #329)

    - Fixed a resource leak that could occur if the creation of an index
      fails for any reason. (#331)


tokumx 1.0.2
------------
Release date: 2013-07-11

General
~~~~~~~

    - This release is focused on bug fixes since 1.0.1.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Backported SERVER-1752 to improve the performance of some count()
      queries by a factor of 2. (#300)


Bug fixes
~~~~~~~~~

    - Fixed a bug introduced in tokumx 1.0.1 where lock timeouts and
      deadlocks caused the connection to die unnecessarily. (#293, #301)

    - Properly handle errors that arise during operation of the bulk
      loader. (#295, #296)


tokumx 1.0.1
------------
Release date: 2013-06-26

New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - The default compression method is now zlib. (#189)


Bug fixes
~~~~~~~~~

    - Fixed a bug causing concurrent insertions on different keys in
      certain (typically nearly-sequential insertion order) scenarios to
      block.  This should improve the performance of workloads with
      multiple writers.  (#273)

    - The code that takes distributed locks in a cluster now correctly
      handles row lock error codes.  This eliminates what were previously
      rare crashes.  (#249)


tokumx 1.0.0
------------
Release date: 2013-06-19

General
~~~~~~~

    - This release is focused on bug fixes since 1.0.0-rc.0.

    - The file names used by TokuMX have been changed, so upgrading from a
      prior version (even 1.0.0-rc.0) is not possible.  Please do a dump
      and restore to upgrade.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - The parameters --logDir and --tmpDir now allow finer control of
      where TokuMX puts its files.  See the users' guide for details.

    - Building an index on a non-empty collection now uses a faster bulk
      loader to do the initial index build.


Bug fixes
~~~~~~~~~

    - Large transactions no longer fail during replication or chunk
      migrations. (#93, #100)

    - Fixed a deadlock that could occur during rapid chunk
      migrations. (#115)

    - Fixed a few miscellaneous bugs in replication and sharding. (#232,
      #228, #225)

    - Properly ignore the $atomic flag for queries. (#230)

    - The bug causing large multi-field $in queries to run slowly has been
      fixed. (#212)

    - Calls to db.eval() are now properly profiled. (#16)


Miscellaneous
~~~~~~~~~~~~~

    - The mongoperf tool has been deprecated. (#174)


tokumx 1.0.0-rc.0
-----------------
Release date: 2013-06-03

General
~~~~~~~

    - The major developments in this release are replication and sharding.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Replication and sharding are now supported for evaluation.

    - Sharding on a hashed key is supported (backported from 2.4).

    - Sharding creates clustering indexes by default, which is a
      significant performance advantage in most cases.  If you need to
      shard on a non-clustering index, you need to specify that in
      sh.shardCollection(), for example

          sh.shardCollection("test.foo",
                             {x: 1},
                             false, // unique
                             false  // clustering
                             );

      - The JS client driver now supports the clustering flag in
        sh.shardCollection, which should only be used if you want to
        specify that you want to shard on a NON-clustering index (set it
        to false).  See above.

    - "DDL" changes (create, drop, ensureIndex, dropIndexes, rename) are
      now supported inside multi-statement transactions, and are properly
      rolled back on rollbackTransaction.

    - The C++ client driver now supports clustering indexes.  This changes
      the function signature for DBClientWithCommands::ensureIndex, please
      check your applications in light of this API change.

    - The C++ client driver has a convenience class for multi-statement
      transactions: RemoteTransaction.  Please check its documentation.

    - The local.oplog.rs collection is no longer capped, and instead can
      be trimmed to keep N days' worth of data.  Use the command line flag
      --expireOplogDays to configure this number of days (by default,
      nothing is trimmed).


Limitations
~~~~~~~~~~~

    - This version of TokuMX targets compatibility with MongoDB 2.2.4.
      Some features and bugfixes have been backported from the 2.4 series,
      but most have not.

    - The format of the local.oplog.rs collection has changed and will
      break any applications that were relying on it.  Also, it is no
      longer capped (see above).

    - On a replica set, large transactions can fail if a transaction is
      too large (due to a limit on the size of a BSON object).  This
      should not be a worry for most existing applications, but some
      commands (copydb, clone, cloneCollection), as well as updates that
      affect a large number of documents (and specify {multi: true}).
      This will be fixed soon, but for now, avoid such operations if you
      are using replication.

    - When performing an initial sync on a secondary, if the primary drops
      any collection, the initial sync may fail.  Try to avoid dropping
      collections during initial syncs of secondaries.

    - For the fastsync option, when starting a secondary, to work, the
      machine must have some data in the oplog associated with the state
      of the machine. If the oplog is empty, then a full initial sync is
      performed.

    - mongodump --oplog and mongorestore --oplogReplay are not supported
      and cannot be used to create a secondary for a replica set.

    - The commands aggregate and mapReduce may have poor concurrency with
      some workloads.  This will be fixed soon, and these commands should
      be able to be run concurrently with each other and with other
      operations.

    - Multi-statement transactions are not supported in a sharded cluster,
      and will be rejected by mongos.

    - $in queries may be slower than expected on a sharded cluster.

    - Calls to db.eval() are not properly profiled when profiling is
      enabled.  The cause for this is not understood.

    - Geospatial and Full Text Search Indexes are not supported (the '2d'
      and 'text' index types).

    - The reIndex command no longer has the same effect it used to.  In
      particular, one effect in vanilla MongoDB is that it recalculates
      whether an index is "multi-key" (which affects query planning and
      some other things), and this side effect no longer exists.  To get
      the old reIndex functionality, just drop and re-create the index
      manually.

    - Only foreground indexing is supported. Background indexing is not.
      We will add background indexing soon.

    - The mongorestore tool only works properly if it restores into a
      running mongod.  Don't try to restore into a fresh data directory,
      instead, start a mongod pointing to that directory, and then use
      mongorestore.

    - Capped collection insert/update performance may be poor compared
      to regular MongoDB if there are few or no secondary indexes.
      Additionally, the constant-size-on-disk property held by regular
      MongoDB is only loosely held by TokuMX, especially because
      collections are compressed. In generaly, users are encouraged
      to use regular collections instead of capped collections when
      possible, especially when disk size properties were a motivating
      factor. Time-to-live (TTL) collections may be a good alternative.

    - listDatabases command and "show dbs" do not show database statistics

tokumx 0.1.0
------------
Release date: 2013-04-15

General
~~~~~~~

    - This release highlights single-threaded and multi-threaded
      performance improvements.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Concurrency: inserts, updates, and deletes into existing collections
      are now concurrent operations, with each other and with read
      operations. (trac #6019)

    - Multi-statement transactions: clients may now issue
      `beginTransaction`, `commitTransaction`, and `rollbackTransaction`
      commands using the `runCommand` interface, to bundle multiple
      individual statements together in the same system transaction.

    - The key format used in vanilla MongoDB's `{v:1}` indexes is now used
      in the Fractal Tree storage system.  This yields significant
      performance gains, particularly for in-memory workloads.

    - Capped collections and tailable cursors are now supported for
      experimental use only.

    - The `renameCollection` command is now supported.

    - The system allocator has been changed fully to jemalloc.


tokumx 0.0.4
------------
Release date: 2013-04-08

New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Server crashes now produce a core file. (trac #6458)

    - Debug info is available in a separate package. (trac #6453)


Bug Fixes
~~~~~~~~~

    - The gcc and stdc++ runtime libraries are now packaged with the
      binaries to fix runtime issues on older Centos 5 machines. (trac
      #6456)


tokumx 0.0.2
------------
Release date: 2013-03-14

General
~~~~~~~

    - First evaluation release.
