tokumx news
===========

tokumx 1.3.1
------------
Release date: 2013-10-25

General
~~~~~~~

    - This release is focused on bug fixes since 1.3.0.

    - Please take careful note of the changed default of expireOplogDays.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - TokuMX now reports progress related to the purging of expired
      entries from the oplog.  (#645)

    - The default value of expireOplogDays has been changed to 14 (entries
      expire after 2 weeks), from 0 (no expiration or purging occurs).

      Therefore, if you haven't set expireOplogDays on the command line or
      in a config file and you've been running a TokuMX replica set for
      more than 14 days, when you upgrade, you may see a lot of oplog
      purging activity initially as it adjusts to the new default.  If you
      have set expireOplogDays, nothing will change when you upgrade.

      See the user's guide for a description of expireOplogDays and
      guidelines for how to choose a good value.

    - Optimized deletes that specify just the `_id` field.  (#669)

    - TokuMX now warns you if you have `cacheSize` set to <1GB, as
      performance may suffer.  (#678)


Bug fixes
~~~~~~~~~

    - Incorporated the fix for
      http://jira.mongodb.org/browse/SERVER-9283[SERVER-9283]
      (lastHeartbeatRecv flaps between invalid and valid dates).  (#660)

    - Fixed an authentication error that prevented manual `copydb` and
      `cloneCollection` commands from succeeding.  (#666)

    - Fixed a problem where setting `lockTimeout` with `setParameter`
      would succeed but claim that it had failed.  It now succeeds and
      reports success.  (#667)

    - Fixed an isolation bug with multi-statement transactions.  (#668)

    - Fixed the upgrading of the `system.users` collection to the MongoDB
      v2.4 format.  Also, version 1.3.1 repairs damage that was possible
      to do to the `system.users` collection in rare cases with version
      1.3.0.  (#673, #674)

    - Fixed a bug that prevented serializable transactions from starting
      on the primary of a replica set.  (#682)


tokumx 1.3.0
------------
Release date: 2013-10-18

General
~~~~~~~

    - This release brings TokuMX full compatibility with MongoDB v2.4,
      except for full text search and geo indexes (2d and 2dsphere).

      For a full set of changes, confer with https://jira.mongodb.org and
      MongoDB's marketing materials.  Some major features are called out
      below in addition to TokuMX-specific features and fixes.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Switched the default Javascript interpreter to V8.  (#161, #497,
      #517)

    - Added the `$setOnInsert` update operator.  (#279)

    - Many numeric `"byte quantity"` parameters can now be specified with
      units, for example `"1MB"` or `"32k"` or `"6T"`.  The allowed
      suffixes are `"kmgt"`, either upper or lower case, and optionally
      also with a `"b"` or `"B"`.  All suffixes use binary quantities, not
      decimal, so `"1MB"` is `1 * 1024 * 1024`, not `1000000`.  The
      command line parameters that accept these quantities are
      `cacheSize`, `locktreeMaxMemory`, and `txnMemLimit`.  These
      parameters, if passed in a BSON object, must be passed as strings,
      and are accepted as parameters to `pageSize`, `readPageSize`, and
      the `size` for capped collections, as well as the argument to the
      `backupThrottle` command in the enterprise Hot Backup plugin.
      (#266, 536, #545)

    - Added mongo shell wrapper functions `db.showLiveTransactions()` and
      `db.showPendingLockRequests()`.  (#437, #526)

    - Merged improvements to the aggregation framework in v2.4, including
      performance optimizations and some behavioral changes.  (#516, #517)

    - Merged authorization system changes (fine-grained access control) in
      v2.4.  (#527, #549)

    - Re-enabled an optimization for updates using the `_id` index.
      (#538)

    - Added a parameter `--loaderMaxMemory` which controls the amount of
      memory used by the bulk loader, which is used by mongorestore.  The
      default value is 100MB.  (#571)

    - The `lockTimeout` parameter can now be set by the `setParameter`
      command.  (#574)

    - Merged changes to the `db.serverStatus()` command, and added several
      TokuMX-specific fields.  See the user's guide for more details.
      (#591, #626, #627)

    - Optimized generation of secondary keys, which impacts workloads with
      a large number of secondary indexes and/or indexes on array-valued
      fields.  (#600, #618)

    - Skip generation of secondary keys for indexes that are not affected
      by an update.  This has a significant positive impact on the
      performance of workloads with indexes on array-valued fields that
      don't get changed by update statements.  (#601, #617)


Bug fixes
~~~~~~~~~

    - Fixed display of date/time information in `db.engineStatus()`
      output.  (#533)

    - Avoid building unique indexes in the background.  Doing this is not
      actually an error, but if another client violates the unique
      constraint for an index that isn't finished building, the index
      build will waste a lot of time building the index only to roll it
      back later.  Unique indexes will always be built in the foreground.
      (#537)

    - Fixed command line parsing of the `--lockTimeout` option.  (#541)

    - Allow `db.dropDatabase()` when profiling is on.  (#546)

    - Fixed an issue where deletes and updates in multi-statement
      transactions can cause indexes to get out of sync.  (#562)

    - Fixed a possible deadlock caused by trying to open a collection in
      certain contexts, like `db.eval()`.  (#573)

    - Fixed a possible crash after aborting a bulk load.  (#589)

    - Prevented `mapReduce` operations from using too much server memory.
      (#593)

    - Fixed an issue where splitting a chunk may fail if many documents
      have been deleted from the chunk since it was created.  (#602)

    - Fixed a bug that causes an extra empty chunk to be generated when
      the `force` option is used with the `splitVector` command.  (#604)

    - The date fields in `db.engineStatus()` are now stored as true BSON
      Date objects, rather than formatted strings.  (#630)

    - Fixed a locking issue with the `replSetExpireOplog` command.  (#642)

    - Fixed an issue where the initial splitting of an empty collection
      for a `shardCollection` command with a hashed shard key would fail
      on clusters of 32 or more shards.  (#649)

    - Fixed the logging of "lock not granted" errors that happen on the
      ydb directory.  (#652)


tokumx 1.2.1
------------
Release date: 2013-09-18

General
~~~~~~~

    - This release adds new diagnostic and performance analysis tools, and
      bug fixes since 1.2.0.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Added index usage stats.  The `db.coll.stats()` command now shows
      cumulative statistics for how each index has been used since the
      last reboot.  See the user's guide for more details.  (#285, #286,
      #501)

    - Added document-level lock debugging information.  With new commands
      `showLiveTransactions` and `showPendingLockRequests`, you can show
      the state of all document-level locks currently held in TokuMX,
      which helps diagnose why a workload might get "lock not granted" or
      "deadlock" errors.  In addition, when an operation fails for one of
      these reasons, some of this information is immediately printed to
      the error log.  See the user's guide for more details.  (#297, #437,
      #490)

    - Added mongo shell wrapper functions `db.beginTransaction()`,
      `db.commitTransaction()`, `db.rollbackTransaction()`, and
      `db.engineStatus()`.  (#488)

    - Added to `mongo2toku` persistent save/resume functionality.  When
      the tool exits, it will write the timestamp to a file, and resume
      from that file, rather than just by printing out the argument to use
      for the next invocation.  (#495)

    - Increased the default `numInitialChunks` for sharding empty
      collections on a hashed key.  This should reduce the number of
      migrations experienced during an initial load or at the beginning of
      a workload.  (#513)


Bug fixes
~~~~~~~~~

    - Fixed a deadlock that occurred when multiple clients tried to create
      the same collection concurrently.  (#477)

    - Improved the reliability and usability of mongorestore when using
      the bulk loader.  (#492, #512, #514, #515)

    - Fixed a race condition that occurred when multiple clients tried to
      open the same database concurrently.  (#499)

    - Reduced lock contention for profiling and diagnostics logging.
      (#505, #506, #508)

    - Includes a fix for a rare memory allocation error exposed by large
      keys in the fractal tree library.  (Tokutek/ft-index#70)


tokumx 1.2.0
------------
Release date: 2013-09-05

General
~~~~~~~

    - This release adds a hot backup tool as an enterprise component.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - The enterprise version of TokuMX now comes with a hot backup plugin
      that offers fast, non-blocking backup of a live running system.  See
      the user's guide for more details.


Bug fixes
~~~~~~~~~

    - Removed unnecessary unique checks done for updates and deletes.
      (#483)

    - Prevent overlocking on findAndModify and point update/delete
      operations.  (#485)


tokumx 1.1.2
------------
Release date: 2013-08-29

General
~~~~~~~

    - This release is focused on bug fixes since 1.1.1.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - The maximum amount of memory that will be used by the document-level
      locking data structures is now configurable with the parameter
      `locktreeMaxMemory=<bytes>`, which defaults to 10% of
      `cacheSize`. (#340)

    - It is now possible to get more debugging information in the log
      during a crash.  To use this, download and unpack the `-debuginfo`
      tarball along with the binary tarball, and run with
      `--gdbPath=/path/to/gdb`.


Bug fixes
~~~~~~~~~

    - Fixed a bug in background indexing and the bulk loader that caused
      indexes to be built as multi-key indexes, which causes the query
      planner to create non-optimal query plans. (#469)

    - Optimized deletes, especially those performed on the oplog. (#471)


tokumx 1.1.1
------------
Release date: 2013-08-23

General
~~~~~~~

    - This release fixes a memory leak introduced in 1.1.0


Bug fixes
~~~~~~~~~

    - Fixed a memory leak in insert/update/delete workloads.  #465


tokumx 1.1.0
------------
Release date: 2013-08-21

General
~~~~~~~

    - This release introduces background indexing support and a fast bulk
      loader for `mongoimport` and `mongorestore`.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Background indexing is now supported. (#9, #372)

    - A bulk load API has been introduced (`beginLoad`, `commitLoad`, and
      `abortLoad` commands) that increases the throughput of initial bulk
      collection loading.  This API is used automatically by `mongoimport`
      and `mongorestore` when loading into a non-existent collection or
      when using the `--drop` option, and is documented in the User's
      Guide. (#287, #288, #313, #371, #386, #387)

    - Reduced the recovery logging overhead of insert/update/delete
      workloads. (#10, #370)

    - Improved the reliability of index builds. (#290, #295, #296)

    - Improved the concurrency of certain highly multi-threaded
      modification workloads. (#342, #343, #358, #432)

    - Optimized the thread that purges old entries from the oplog. (#399,
      #435, #447)

    - Improved the reliability of distributed locks used in
      sharding. (#451)


tokumx 1.0.4
------------
Release date: 2013-08-14

General
~~~~~~~

    - This release is focused on bug fixes since 1.0.3.

    - This release fixes a critical bug in replication present in all
      versions up to and including 1.0.3.  See below for details.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Added a thread to do periodic optimization of the oplog, which
      should clear space from it more aggressively. (#399)

    - Added new commands `replGetExpireOplog` and `replSetExpireOplog` for
      dynamically controlling the size of the oplog. (#415)


Bug fixes
~~~~~~~~~

    - Backported https://jira.mongodb.org/browse/SERVER-1929[SERVER-1929]
      from mongodb 2.4 to prevent replica set failover thrashing. (#344)

    - Prevented the oplog purging thread from completely emptying the
      oplog during long idle periods. (#345)

    - Backported https://jira.mongodb.org/browse/SERVER-7951[SERVER-7951]
      from mongodb 2.4 to allow replace-style updates when using hashed
      shard keys. (#347)

    - Improved the concurrency model used by authentication.  This also
      fixes a deadlock that can occur most often when running with
      authentication but without any admin users declared. (#366, #375,
      #401)

    - Resolved a crash when using the web UI on a server running with
      authentication. (#378)

    - Data cleanup after a successful chunk migration no longer happens on
      a background thread.  This fixes some performance issues triggered
      by a large number of migrations piling up. (#379, #393)

    - Improved reliability of the distributed locking used by
      sharding. (#413)

    - Fixed a race condition that could result in data loss on
      secondaries, under multi-threaded workloads.  This bug can produce a
      secondary that appears to be fully synced but is missing some data,
      and if this secondary is ever elected primary, could result in the
      permanent loss of that data.  All servers should immediately be
      upgraded to 1.0.4 or greater, all secondaries should be re-synced
      from an empty state, and any possible internal consistency
      invariants should be checked. (#433)

    - Fixed a bug that prevented the oplog from getting trimmed properly
      in certain cases. (#435)

    - Backported fixes for
      https://jira.mongodb.org/browse/SERVER-10458[SERVER-10458],
      https://jira.mongodb.org/browse/SERVER-10478[SERVER-10478], and
      https://jira.mongodb.org/browse/SERVER-10498[SERVER-10498] from
      upstream.  This brings tokumx current with mongodb 2.2.6. (#436)


tokumx 1.0.3
------------
Release date: 2013-07-23

General
~~~~~~~

    - This release adds a tool for performing online data migration from
      vanilla MongoDB.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Added the `mongo2toku` tool that reads and replays the vanilla
      MongoDB replication format, which allows TokuMX to sync from vanilla
      MongoDB. (#320)

    - Added a storage layer optimization that improves the processor
      caching behavior and performance of point queries and especially
      non-covering secondary range queries. (#312)

    - Improved the concurrency behavior of the storage layer when, for a
      large transaction, the commit or abort itself is expensive. (#334)


Bug fixes
~~~~~~~~~

    - Fixed a few race conditions and strange behaviors related to
      replication. (#322, #325, #328, #329)

    - Fixed a resource leak that could occur if the creation of an index
      fails for any reason. (#331)


tokumx 1.0.2
------------
Release date: 2013-07-11

General
~~~~~~~

    - This release is focused on bug fixes since 1.0.1.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Backported SERVER-1752 to improve the performance of some count()
      queries by a factor of 2. (#300)


Bug fixes
~~~~~~~~~

    - Fixed a bug introduced in tokumx 1.0.1 where lock timeouts and
      deadlocks caused the connection to die unnecessarily. (#293, #301)

    - Properly handle errors that arise during operation of the bulk
      loader. (#295, #296)


tokumx 1.0.1
------------
Release date: 2013-06-26

New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - The default compression method is now zlib. (#189)


Bug fixes
~~~~~~~~~

    - Fixed a bug causing concurrent insertions on different keys in
      certain (typically nearly-sequential insertion order) scenarios to
      block.  This should improve the performance of workloads with
      multiple writers.  (#273)

    - The code that takes distributed locks in a cluster now correctly
      handles row lock error codes.  This eliminates what were previously
      rare crashes.  (#249)


tokumx 1.0.0
------------
Release date: 2013-06-19

General
~~~~~~~

    - This release is focused on bug fixes since 1.0.0-rc.0.

    - The file names used by TokuMX have been changed, so upgrading from a
      prior version (even 1.0.0-rc.0) is not possible.  Please do a dump
      and restore to upgrade.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - The parameters --logDir and --tmpDir now allow finer control of
      where TokuMX puts its files.  See the users' guide for details.

    - Building an index on a non-empty collection now uses a faster bulk
      loader to do the initial index build.


Bug fixes
~~~~~~~~~

    - Large transactions no longer fail during replication or chunk
      migrations. (#93, #100)

    - Fixed a deadlock that could occur during rapid chunk
      migrations. (#115)

    - Fixed a few miscellaneous bugs in replication and sharding. (#232,
      #228, #225)

    - Properly ignore the $atomic flag for queries. (#230)

    - The bug causing large multi-field $in queries to run slowly has been
      fixed. (#212)

    - Calls to db.eval() are now properly profiled. (#16)


Miscellaneous
~~~~~~~~~~~~~

    - The mongoperf tool has been deprecated. (#174)


tokumx 1.0.0-rc.0
-----------------
Release date: 2013-06-03

General
~~~~~~~

    - The major developments in this release are replication and sharding.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Replication and sharding are now supported for evaluation.

    - Sharding on a hashed key is supported (backported from 2.4).

    - Sharding creates clustering indexes by default, which is a
      significant performance advantage in most cases.  If you need to
      shard on a non-clustering index, you need to specify that in
      sh.shardCollection(), for example

          sh.shardCollection("test.foo",
                             {x: 1},
                             false, // unique
                             false  // clustering
                             );

      - The JS client driver now supports the clustering flag in
        sh.shardCollection, which should only be used if you want to
        specify that you want to shard on a NON-clustering index (set it
        to false).  See above.

    - "DDL" changes (create, drop, ensureIndex, dropIndexes, rename) are
      now supported inside multi-statement transactions, and are properly
      rolled back on rollbackTransaction.

    - The C++ client driver now supports clustering indexes.  This changes
      the function signature for DBClientWithCommands::ensureIndex, please
      check your applications in light of this API change.

    - The C++ client driver has a convenience class for multi-statement
      transactions: RemoteTransaction.  Please check its documentation.

    - The local.oplog.rs collection is no longer capped, and instead can
      be trimmed to keep N days' worth of data.  Use the command line flag
      --expireOplogDays to configure this number of days (by default,
      nothing is trimmed).


Limitations
~~~~~~~~~~~

    - This version of TokuMX targets compatibility with MongoDB 2.2.4.
      Some features and bugfixes have been backported from the 2.4 series,
      but most have not.

    - The format of the local.oplog.rs collection has changed and will
      break any applications that were relying on it.  Also, it is no
      longer capped (see above).

    - On a replica set, large transactions can fail if a transaction is
      too large (due to a limit on the size of a BSON object).  This
      should not be a worry for most existing applications, but some
      commands (copydb, clone, cloneCollection), as well as updates that
      affect a large number of documents (and specify {multi: true}).
      This will be fixed soon, but for now, avoid such operations if you
      are using replication.

    - When performing an initial sync on a secondary, if the primary drops
      any collection, the initial sync may fail.  Try to avoid dropping
      collections during initial syncs of secondaries.

    - For the fastsync option, when starting a secondary, to work, the
      machine must have some data in the oplog associated with the state
      of the machine. If the oplog is empty, then a full initial sync is
      performed.

    - mongodump --oplog and mongorestore --oplogReplay are not supported
      and cannot be used to create a secondary for a replica set.

    - The commands aggregate and mapReduce may have poor concurrency with
      some workloads.  This will be fixed soon, and these commands should
      be able to be run concurrently with each other and with other
      operations.

    - Multi-statement transactions are not supported in a sharded cluster,
      and will be rejected by mongos.

    - $in queries may be slower than expected on a sharded cluster.

    - Calls to db.eval() are not properly profiled when profiling is
      enabled.  The cause for this is not understood.

    - Geospatial and Full Text Search Indexes are not supported (the '2d'
      and 'text' index types).

    - The reIndex command no longer has the same effect it used to.  In
      particular, one effect in vanilla MongoDB is that it recalculates
      whether an index is "multi-key" (which affects query planning and
      some other things), and this side effect no longer exists.  To get
      the old reIndex functionality, just drop and re-create the index
      manually.

    - Only foreground indexing is supported. Background indexing is not.
      We will add background indexing soon.

    - The mongorestore tool only works properly if it restores into a
      running mongod.  Don't try to restore into a fresh data directory,
      instead, start a mongod pointing to that directory, and then use
      mongorestore.

    - Capped collection insert/update performance may be poor compared
      to regular MongoDB if there are few or no secondary indexes.
      Additionally, the constant-size-on-disk property held by regular
      MongoDB is only loosely held by TokuMX, especially because
      collections are compressed. In generaly, users are encouraged
      to use regular collections instead of capped collections when
      possible, especially when disk size properties were a motivating
      factor. Time-to-live (TTL) collections may be a good alternative.

    - listDatabases command and "show dbs" do not show database statistics

tokumx 0.1.0
------------
Release date: 2013-04-15

General
~~~~~~~

    - This release highlights single-threaded and multi-threaded
      performance improvements.


New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Concurrency: inserts, updates, and deletes into existing collections
      are now concurrent operations, with each other and with read
      operations. (trac #6019)

    - Multi-statement transactions: clients may now issue
      `beginTransaction`, `commitTransaction`, and `rollbackTransaction`
      commands using the `runCommand` interface, to bundle multiple
      individual statements together in the same system transaction.

    - The key format used in vanilla MongoDB's `{v:1}` indexes is now used
      in the Fractal Tree storage system.  This yields significant
      performance gains, particularly for in-memory workloads.

    - Capped collections and tailable cursors are now supported for
      experimental use only.

    - The `renameCollection` command is now supported.

    - The system allocator has been changed fully to jemalloc.


tokumx 0.0.4
------------
Release date: 2013-04-08

New features and improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    - Server crashes now produce a core file. (trac #6458)

    - Debug info is available in a separate package. (trac #6453)


Bug Fixes
~~~~~~~~~

    - The gcc and stdc++ runtime libraries are now packaged with the
      binaries to fix runtime issues on older Centos 5 machines. (trac
      #6456)


tokumx 0.0.2
------------
Release date: 2013-03-14

General
~~~~~~~

    - First evaluation release.
